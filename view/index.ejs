<!doctype html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <main>
        <nav class="bg-[#1F2435] text-white text-center py-3">
            <input id="user-id" type="text" placeholder="이름을 입력하세요" class="text-black" />
            <input id="peer-input" type="text" placeholder="other peer id" class="text-black" />
            <button id="connect-btn">채팅 접속</button>
        </nav>
        <section class="flex flex-2 min-h-[100vh]">
            <div class="video-side grid grid-cols-4 bg-[#181B29]">
                <div class=" h-[300px]">
                    <video class="myvideo"  width="400" height="300"/>
                </div>
            </div>
            <div class="chat-side bg-[#262C41] w-[600px]">
                <nav class="text-white text-center py-3">Chat</nav>
                <ul class="text-white px-2">
                    <li>name : hi</li>
                    <li>name : hi</li>
                    <li>name : hi</li>
                </ul>
            </div>
        </section>
    </main>
</body>
<script src="https://cdn.tailwindcss.com"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/peerjs@1.3.2/dist/peerjs.min.js"></script>
<script>
    let socket;
    let peer;
    let myPeerId;
    let roomName = '2번방';
    let myVideoStream;

    const myVideo = document.querySelector('.myvideo');
    const connectBtn = document.querySelector('#connect-btn');
    const userIdInput = document.querySelector('#user-id');
    const peerInput = document.querySelector('#peer-input');
    const videoSide = document.querySelector('.video-side');
    connectBtn.addEventListener('click',(e)=>init());

    getMyVideo();
    function init(){
        openMypeerAndSocket();
        listenOtherPeer();
        listenOtherCall();
        listenRoomList();
    }

    function getMyVideo(){
        myVideo.addEventListener("loadedmetadata", () => {
            myVideo.play();
        });
        navigator.mediaDevices.getUserMedia({
            audio:false,
            video:true
        }).then(stream=>{
            myVideo.srcObject = stream;
            myVideoStream = stream;

        })
    }
    function openMypeerAndSocket(){
         socket = io();
         peer = new Peer();
        peer.on('open',(id)=>{
            console.log('My Peer id : ',id)
            myPeerId = id;
            joinSocketRoom();
            myVideo.setAttribute('id',id)

        })
    }
    function listenOtherPeer(){
        peer.on('connection',(conn)=>{
            console.log('someone connected :',conn);
            conn.on('data',(data)=>{
                console.log('받은 데이터 : ',data)
            })
        })
    }
    function connectToOtherPeer(){
        const conn = peer.connect(peerInput.value);
        conn.on('open',()=>{
            conn.send('hihi!')
        })
    }
    function callToOtherpeer(peerID){
        const call = peer.call(peerID,myVideoStream);
        console.log(peer)
        call.on('stream',(stream)=>{
            console.log('받장 받은 stream',stream)
            createNewOtherVideo(stream);
        })
    }
    function listenOtherCall(){
        peer.on('call',call=>{
            call.answer(myVideoStream);
            console.log(call)
            call.on('stream',(stream)=>{
                console.log('전화받은 stream',stream)
                createNewOtherVideo(stream);
            })
        })
    }
    function createNewOtherVideo(stream){
        const div = document.createElement('div');
        const video = document.createElement('video');
        div.appendChild(video);
        div.classList.add('h-[300px]');
        video.setAttribute('width','400');
        video.setAttribute('height','300');
        video.setAttribute('id',stream.id);
        video.srcObject = stream;
        video.play();
        videoSide.appendChild(div);
    }
    function joinSocketRoom(){
        socket.emit('join room',{roomName,peerId:myPeerId,userId:userIdInput.value,socketId:socket.id})
    }
    function listenRoomList(){
        socket.on('room list',(roomList)=>{
            console.log(roomList)
        })
    }


</script>

</html>